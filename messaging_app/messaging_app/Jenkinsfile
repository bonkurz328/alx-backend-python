pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        IMAGE_NAME = 'WoB/django-messaging-app'
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        PROJECT_DIR = 'messaging_app'
        VENV_DIR = 'venv'
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', 
                url: 'https://github.com/bonkurz328/alx-backend-python.git',
                credentialsId: 'wob-jenkins-id'
            }
        }
        
        stage('Setup Environment') {
            steps {
                script {
                    echo "Setting up Python virtual environment..."
                    sh "python3 -m venv ${VENV_DIR}"
                    sh ". ${VENV_DIR}/bin/activate && pip install --upgrade pip"
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    echo "Installing Python dependencies..."
                    sh ". ${VENV_DIR}/bin/activate && pip install -r ${PROJECT_DIR}/requirements.txt"
                    
                    // Install additional testing dependencies if needed
                    sh ". ${VENV_DIR}/bin/activate && pip install coverage pylint"
                }
            }
        }
        
        stage('Code Quality Check') {
            steps {
                script {
                    echo "Running code quality checks..."
                    sh ". ${VENV_DIR}/bin/activate && pylint ${PROJECT_DIR}/*.py ${PROJECT_DIR}/**/*.py --exit-zero || true"
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    echo "Running Django tests..."
                    sh """
                    . ${VENV_DIR}/bin/activate
                    cd ${PROJECT_DIR}
                    python manage.py test --noinput --verbosity=2
                    """
                }
            }
        }
        
        stage('Test Coverage') {
            steps {
                script {
                    echo "Generating test coverage report..."
                    sh """
                    . ${VENV_DIR}/bin/activate
                    cd ${PROJECT_DIR}
                    coverage run --source='.' manage.py test --noinput
                    coverage report
                    coverage html
                    """
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image..."
                    docker.build("${IMAGE_NAME}:${env.BUILD_ID}")
                }
            }
        }
        
        stage('Test Docker Image') {
            steps {
                script {
                    echo "Testing Docker image..."
                    // You can add container tests here if needed
                    sh "docker run --rm ${IMAGE_NAME}:${env.BUILD_ID} python manage.py check --deploy || true"
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    echo "Pushing Docker image to Docker Hub..."
                    docker.withRegistry(DOCKER_REGISTRY, 'dockerhub-credentials') {
                        // Push with build ID tag
                        docker.image("${IMAGE_NAME}:${env.BUILD_ID}").push()
                        
                        // Also push with latest tag for the most recent successful build
                        docker.image("${IMAGE_NAME}:${env.BUILD_ID}").push('latest')
                    }
                    echo "Docker image pushed successfully!"
                }
            }
        }
        
        stage('Deploy Preview') {
            when {
                expression { 
                    env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'master' 
                }
            }
            steps {
                script {
                    echo "This would be where you deploy to staging environment"
                    // Add your deployment steps here
                    // Example: sh "kubectl set image deployment/messaging-app messaging-app=${IMAGE_NAME}:${env.BUILD_ID}"
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "Cleaning up workspace..."
                // Clean up Docker images to save space
                sh "docker rmi ${IMAGE_NAME}:${env.BUILD_ID} || true"
                cleanWs()
            }
        }
        success {
            script {
                echo "Pipeline completed successfully! ✅"
                echo "Docker image: ${IMAGE_NAME}:${env.BUILD_ID}"
                echo "Latest image: ${IMAGE_NAME}:latest"
                
                // Send success notification (optional)
                // emailext body: "Build ${env.BUILD_NUMBER} completed successfully!\n\nDocker Image: ${IMAGE_NAME}:${env.BUILD_ID}", subject: "Jenkins Build Success - ${env.JOB_NAME}", to: "team@example.com"
            }
        }
        failure {
            script {
                echo "Pipeline failed! ❌"
                echo "Check the build logs for details."
                
                // Send failure notification (optional)
                // emailext body: "Build ${env.BUILD_NUMBER} failed!\n\nPlease check Jenkins for details.", subject: "Jenkins Build Failed - ${env.JOB_NAME}", to: "team@example.com"
            }
        }
        unstable {
            echo "Pipeline marked as unstable (tests failed but build completed)"
        }
    }
    
    options {
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        retry(2)
    }
    
    triggers {
        pollSCM('H/5 * * * *')  // Poll SCM every 5 minutes
        // Alternatively, use webhooks for GitHub:
        // githubPush()
    }
}
